["src/nvim/po/sjiscorr.c", ["{", "\tchar buffer[BUFSIZ];", "\tchar *p;"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\tchar buffer[BUFSIZ];", "\tchar *p;", ""], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["", "\twhile (fgets(buffer, BUFSIZ, stdin) != NULL)", "\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\twhile (fgets(buffer, BUFSIZ, stdin) != NULL)", "\t{", "\t\tfor (p = buffer; *p != 0; p++)"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\twhile (fgets(buffer, BUFSIZ, stdin) != NULL)", "\t{", "\t\tfor (p = buffer; *p != 0; p++)"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t{", "\t\tfor (p = buffer; *p != 0; p++)", "\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\tfor (p = buffer; *p != 0; p++)", "\t\t{", "\t\t\tif (strncmp(p, \"charset=utf-8\", 13) == 0)"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\tfor (p = buffer; *p != 0; p++)", "\t\t{", "\t\t\tif (strncmp(p, \"charset=utf-8\", 13) == 0)"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t{", "\t\t\tif (strncmp(p, \"charset=utf-8\", 13) == 0)", "\t\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\tif (strncmp(p, \"charset=utf-8\", 13) == 0)", "\t\t\t{", "\t\t\t\tfputs(\"charset=cp932\", stdout);"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\tif (strncmp(p, \"charset=utf-8\", 13) == 0)", "\t\t\t{", "\t\t\t\tfputs(\"charset=cp932\", stdout);"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t\t{", "\t\t\t\tfputs(\"charset=cp932\", stdout);", "\t\t\t\tp += 12;"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tfputs(\"charset=cp932\", stdout);", "\t\t\t\tp += 12;", "\t\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tp += 12;", "\t\t\t}", "\t\t\telse if (strncmp(p, \"# Original translations\", 23) == 0)"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse if (strncmp(p, \"# Original translations\", 23) == 0)", "\t\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse if (strncmp(p, \"# Original translations\", 23) == 0)", "\t\t\t{"], "whitespace/newline"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse if (strncmp(p, \"# Original translations\", 23) == 0)", "\t\t\t{", "\t\t\t\tfputs(\"# generated from ja.po, DO NOT EDIT\", stdout);"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse if (strncmp(p, \"# Original translations\", 23) == 0)", "\t\t\t{", "\t\t\t\tfputs(\"# generated from ja.po, DO NOT EDIT\", stdout);"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t\t{", "\t\t\t\tfputs(\"# generated from ja.po, DO NOT EDIT\", stdout);", "\t\t\t\twhile (p[1] != '\\n')"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tfputs(\"# generated from ja.po, DO NOT EDIT\", stdout);", "\t\t\t\twhile (p[1] != '\\n')", "\t\t\t\t\t++p;"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\twhile (p[1] != '\\n')", "\t\t\t\t\t++p;", "\t\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t\t++p;", "\t\t\t}", "\t\t\telse if (*(unsigned char *)p == 0x81 && p[1] == '_')"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse if (*(unsigned char *)p == 0x81 && p[1] == '_')", "\t\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse if (*(unsigned char *)p == 0x81 && p[1] == '_')", "\t\t\t{"], "whitespace/newline"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse if (*(unsigned char *)p == 0x81 && p[1] == '_')", "\t\t\t{", "\t\t\t\tputchar('\\\\');"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse if (*(unsigned char *)p == 0x81 && p[1] == '_')", "\t\t\t{", "\t\t\t\tputchar('\\\\');"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t\t{", "\t\t\t\tputchar('\\\\');", "\t\t\t\t++p;"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tputchar('\\\\');", "\t\t\t\t++p;", "\t\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t++p;", "\t\t\t}", "\t\t\telse"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse", "\t\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t\telse", "\t\t\t{"], "whitespace/newline"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse", "\t\t\t{", "\t\t\t\tif (*p & 0x80)"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\telse", "\t\t\t{", "\t\t\t\tif (*p & 0x80)"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t\t{", "\t\t\t\tif (*p & 0x80)", "\t\t\t\t{"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tif (*p & 0x80)", "\t\t\t\t{", "\t\t\t\t\tputchar(*p++);"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tif (*p & 0x80)", "\t\t\t\t{", "\t\t\t\t\tputchar(*p++);"], "whitespace/braces"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t{", "\t\t\t\t\tputchar(*p++);", "\t\t\t\t\tif (*p == '\\\\')"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t\tputchar(*p++);", "\t\t\t\t\tif (*p == '\\\\')", "\t\t\t\t\t\tputchar(*p);"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t\tif (*p == '\\\\')", "\t\t\t\t\t\tputchar(*p);", "\t\t\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t\t\tputchar(*p);", "\t\t\t\t}", "\t\t\t\tputchar(*p);"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\t}", "\t\t\t\tputchar(*p);", "\t\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t\tputchar(*p);", "\t\t\t}", "\t\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t\t}", "\t\t}", "\t}"], "whitespace/tab"]
["src/nvim/po/sjiscorr.c", ["\t\t}", "\t}", "}"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["", "#ifndef __AC_KHASH_H", "#define __AC_KHASH_H"], "build/header_guard"]
["src/nvim/lib/khash.h", ["\tKHASH_INIT(name, kh_cstr_t, khval_t, 1, kh_str_hash_func, kh_str_hash_equal)", "#endif /* __AC_KHASH_H */", ""], "build/header_guard"]
["src/nvim/lib/khash.h", ["#else", "typedef unsigned long long khint64_t;", "#endif"], "runtime/int"]
["src/nvim/lib/khash.h", ["", "#define __ac_isempty(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&2)", "#define __ac_isdel(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&1)"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_isempty(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&2)", "#define __ac_isdel(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&1)", "#define __ac_iseither(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&3)"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_isdel(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&1)", "#define __ac_iseither(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&3)", "#define __ac_set_isdel_false(flag, i) (flag[i>>4]&=~(khint_t)(1ul<<((i&0xfU)<<1)))"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_iseither(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&3)", "#define __ac_set_isdel_false(flag, i) (flag[i>>4]&=~(khint_t)(1ul<<((i&0xfU)<<1)))", "#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define __ac_iseither(flag, i) ((flag[i>>4]>>((i&0xfU)<<1))&3)", "#define __ac_set_isdel_false(flag, i) (flag[i>>4]&=~(khint_t)(1ul<<((i&0xfU)<<1)))", "#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_set_isdel_false(flag, i) (flag[i>>4]&=~(khint_t)(1ul<<((i&0xfU)<<1)))", "#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))", "#define __ac_set_isboth_false(flag, i) (flag[i>>4]&=~(khint_t)(3ul<<((i&0xfU)<<1)))"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define __ac_set_isdel_false(flag, i) (flag[i>>4]&=~(khint_t)(1ul<<((i&0xfU)<<1)))", "#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))", "#define __ac_set_isboth_false(flag, i) (flag[i>>4]&=~(khint_t)(3ul<<((i&0xfU)<<1)))"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))", "#define __ac_set_isboth_false(flag, i) (flag[i>>4]&=~(khint_t)(3ul<<((i&0xfU)<<1)))", "#define __ac_set_isdel_true(flag, i) (flag[i>>4]|=(khint_t)1ul<<((i&0xfU)<<1))"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define __ac_set_isempty_false(flag, i) (flag[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1)))", "#define __ac_set_isboth_false(flag, i) (flag[i>>4]&=~(khint_t)(3ul<<((i&0xfU)<<1)))", "#define __ac_set_isdel_true(flag, i) (flag[i>>4]|=(khint_t)1ul<<((i&0xfU)<<1))"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#define __ac_set_isboth_false(flag, i) (flag[i>>4]&=~(khint_t)(3ul<<((i&0xfU)<<1)))", "#define __ac_set_isdel_true(flag, i) (flag[i>>4]|=(khint_t)1ul<<((i&0xfU)<<1))", ""], "whitespace/operators"]
["src/nvim/lib/khash.h", ["#ifndef kroundup32", "#define kroundup32(x) (--(x), (x)|=(x)>>1, (x)|=(x)>>2, (x)|=(x)>>4, (x)|=(x)>>8, (x)|=(x)>>16, ++(x))", "#endif"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#ifndef kcalloc", "#define kcalloc(N,Z) xcalloc(N,Z)", "#endif"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["#ifndef krealloc", "#define krealloc(P,Z) xrealloc(P,Z)", "#endif"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["#define __KHASH_TYPE(name, khkey_t, khval_t) \\", "\ttypedef struct { \\", "\t\tkhint_t n_buckets, size, n_occupied, upper_bound; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\ttypedef struct { \\", "\t\tkhint_t n_buckets, size, n_occupied, upper_bound; \\", "\t\tkhint32_t *flags; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint_t n_buckets, size, n_occupied, upper_bound; \\", "\t\tkhint32_t *flags; \\", "\t\tkhkey_t *keys; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint32_t *flags; \\", "\t\tkhkey_t *keys; \\", "\t\tkhval_t *vals; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhkey_t *keys; \\", "\t\tkhval_t *vals; \\", "\t} kh_##name##_t;"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhval_t *vals; \\", "\t} kh_##name##_t;", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["", "#define __KHASH_PROTOTYPES(name, khkey_t, khval_t)\t \t\t\t\t\t\\", "\textern kh_##name##_t *kh_init_##name(void);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define __KHASH_PROTOTYPES(name, khkey_t, khval_t)\t \t\t\t\t\t\\", "\textern kh_##name##_t *kh_init_##name(void);\t\t\t\t\t\t\t\\", "\textern void kh_destroy_##name(kh_##name##_t *h);\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern kh_##name##_t *kh_init_##name(void);\t\t\t\t\t\t\t\\", "\textern void kh_destroy_##name(kh_##name##_t *h);\t\t\t\t\t\\", "\textern void kh_clear_##name(kh_##name##_t *h);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern void kh_destroy_##name(kh_##name##_t *h);\t\t\t\t\t\\", "\textern void kh_clear_##name(kh_##name##_t *h);\t\t\t\t\t\t\\", "\textern khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key); \t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern void kh_clear_##name(kh_##name##_t *h);\t\t\t\t\t\t\\", "\textern khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key); \t\\", "\textern void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key); \t\\", "\textern void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets); \\", "\textern khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets); \\", "\textern khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret); \\", "\textern void kh_del_##name(kh_##name##_t *h, khint_t x);"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\textern khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret); \\", "\textern void kh_del_##name(kh_##name##_t *h, khint_t x);", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["", "#define __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\tSCOPE kh_##name##_t *kh_init_##name(void) {\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\tSCOPE kh_##name##_t *kh_init_##name(void) {\t\t\t\t\t\t\t\\", "\t\treturn (kh_##name##_t*)kcalloc(1, sizeof(kh_##name##_t));\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE kh_##name##_t *kh_init_##name(void) {\t\t\t\t\t\t\t\\", "\t\treturn (kh_##name##_t*)kcalloc(1, sizeof(kh_##name##_t));\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\treturn (kh_##name##_t*)kcalloc(1, sizeof(kh_##name##_t));\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                      \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                      \\", "\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                      \\", "\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_destroy_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree((void *)h->keys); kfree(h->flags);\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree((void *)h->keys); kfree(h->flags);\t\t\t\t\t\\", "\t\t\tkfree((void *)h->vals);\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree((void *)h->keys); kfree(h->flags);\t\t\t\t\t\\", "\t\t\tkfree((void *)h->vals);\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\tkfree((void *)h->keys); kfree(h->flags);\t\t\t\t\t\\", "\t\t\tkfree((void *)h->vals);\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree(h);\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkfree((void *)h->vals);\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree(h);\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkfree(h);\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h && h->flags) {\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_clear_##name(kh_##name##_t *h)\t\t\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h && h->flags) {\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h && h->flags) {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tmemset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h && h->flags) {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tmemset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \\", "\t\t\th->size = h->n_occupied = 0;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tmemset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \\", "\t\t\th->size = h->n_occupied = 0;\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->size = h->n_occupied = 0;\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\", "\t\tREAL_FATTR_UNUSED;                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\", "\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h->n_buckets) {\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) \t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h->n_buckets) {\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h->n_buckets) {\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkhint_t k, i, last, mask, step = 0; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h->n_buckets) {\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkhint_t k, i, last, mask, step = 0; \\", "\t\t\tmask = h->n_buckets - 1;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkhint_t k, i, last, mask, step = 0; \\", "\t\t\tmask = h->n_buckets - 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\tk = __hash_func(key); i = k & mask;\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tmask = h->n_buckets - 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\tk = __hash_func(key); i = k & mask;\t\t\t\t\t\t\t\\", "\t\t\tlast = i; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tmask = h->n_buckets - 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\tk = __hash_func(key); i = k & mask;\t\t\t\t\t\t\t\\", "\t\t\tlast = i; \\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\tk = __hash_func(key); i = k & mask;\t\t\t\t\t\t\t\\", "\t\t\tlast = i; \\", "\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tlast = i; \\", "\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\ti = (i + (++step)) & mask; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tlast = i; \\", "\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\ti = (i + (++step)) & mask; \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\ti = (i + (++step)) & mask; \\", "\t\t\t\tif (i == last) return h->n_buckets;\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\ti = (i + (++step)) & mask; \\", "\t\t\t\tif (i == last) return h->n_buckets;\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (i == last) return h->n_buckets;\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\treturn __ac_iseither(h->flags, i)? h->n_buckets : i;\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\treturn __ac_iseither(h->flags, i)? h->n_buckets : i;\t\t\\", "\t\t} else return 0;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\treturn __ac_iseither(h->flags, i)? h->n_buckets : i;\t\t\\", "\t\t} else return 0;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\treturn __ac_iseither(h->flags, i)? h->n_buckets : i;\t\t\\", "\t\t} else return 0;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/khash.h", ["\t\t\treturn __ac_iseither(h->flags, i)? h->n_buckets : i;\t\t\\", "\t\t} else return 0;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t} else return 0;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t\tREAL_FATTR_UNUSED;                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t{ /* This function uses 0.25*n_buckets bytes of working space instead of [sizeof(key_t+val_t)+.25]*n_buckets. */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t{ /* This function uses 0.25*n_buckets bytes of working space instead of [sizeof(key_t+val_t)+.25]*n_buckets. */ \\", "\t\tkhint32_t *new_flags = 0;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t{ /* This function uses 0.25*n_buckets bytes of working space instead of [sizeof(key_t+val_t)+.25]*n_buckets. */ \\", "\t\tkhint32_t *new_flags = 0;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \\", "\t{ /* This function uses 0.25*n_buckets bytes of working space instead of [sizeof(key_t+val_t)+.25]*n_buckets. */ \\", "\t\tkhint32_t *new_flags = 0;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{ /* This function uses 0.25*n_buckets bytes of working space instead of [sizeof(key_t+val_t)+.25]*n_buckets. */ \\", "\t\tkhint32_t *new_flags = 0;\t\t\t\t\t\t\t\t\t\t\\", "\t\tkhint_t j = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint32_t *new_flags = 0;\t\t\t\t\t\t\t\t\t\t\\", "\t\tkhint_t j = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint_t j = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkroundup32(new_n_buckets); \t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint_t j = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkroundup32(new_n_buckets); \t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkroundup32(new_n_buckets); \t\t\t\t\t\t\t\t\t\\", "\t\t\tif (new_n_buckets < 4) new_n_buckets = 4;\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkroundup32(new_n_buckets); \t\t\t\t\t\t\t\t\t\\", "\t\t\tif (new_n_buckets < 4) new_n_buckets = 4;\t\t\t\t\t\\", "\t\t\tif (h->size >= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0;\t/* requested size is too small */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (new_n_buckets < 4) new_n_buckets = 4;\t\t\t\t\t\\", "\t\t\tif (h->size >= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0;\t/* requested size is too small */ \\", "\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (new_n_buckets < 4) new_n_buckets = 4;\t\t\t\t\t\\", "\t\t\tif (h->size >= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0;\t/* requested size is too small */ \\", "\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\tif (h->size >= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0;\t/* requested size is too small */ \\", "\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\", "\t\t\t\tnew_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t));\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (h->size >= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) j = 0;\t/* requested size is too small */ \\", "\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\", "\t\t\t\tnew_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t));\t\\"], "readability/braces"]
["src/nvim/lib/khash.h", ["\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\", "\t\t\t\tnew_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t));\t\\", "\t\t\t\tmemset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\telse { /* hash table size to be changed (shrink or expand); rehash */ \\", "\t\t\t\tnew_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t));\t\\", "\t\t\t\tmemset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\tnew_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t));\t\\", "\t\t\t\tmemset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \\", "\t\t\t\tif (h->n_buckets < new_n_buckets) {\t/* expand */\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tmemset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \\", "\t\t\t\tif (h->n_buckets < new_n_buckets) {\t/* expand */\t\t\\", "\t\t\t\t\tkhkey_t *new_keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (h->n_buckets < new_n_buckets) {\t/* expand */\t\t\\", "\t\t\t\t\tkhkey_t *new_keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\t\th->keys = new_keys;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (h->n_buckets < new_n_buckets) {\t/* expand */\t\t\\", "\t\t\t\t\tkhkey_t *new_keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\t\th->keys = new_keys;\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tkhkey_t *new_keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\t\th->keys = new_keys;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (kh_is_map) {\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\th->keys = new_keys;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (kh_is_map) {\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\tkhval_t *new_vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (kh_is_map) {\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\tkhval_t *new_vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t\t\t\th->vals = new_vals;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (kh_is_map) {\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\tkhval_t *new_vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t\t\t\th->vals = new_vals;\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tkhval_t *new_vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t\t\t\th->vals = new_vals;\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\th->vals = new_vals;\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t} /* otherwise shrink */\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t} /* otherwise shrink */\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t} /* otherwise shrink */\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (j) { /* rehashing is needed */\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (j) { /* rehashing is needed */\t\t\t\t\t\t\t\t\\", "\t\t\tfor (j = 0; j != h->n_buckets; ++j) {\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (j) { /* rehashing is needed */\t\t\t\t\t\t\t\t\\", "\t\t\tfor (j = 0; j != h->n_buckets; ++j) {\t\t\t\t\t\t\\", "\t\t\t\tif (__ac_iseither(h->flags, j) == 0) {\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tfor (j = 0; j != h->n_buckets; ++j) {\t\t\t\t\t\t\\", "\t\t\t\tif (__ac_iseither(h->flags, j) == 0) {\t\t\t\t\t\\", "\t\t\t\t\tkhkey_t key = h->keys[j];\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (__ac_iseither(h->flags, j) == 0) {\t\t\t\t\t\\", "\t\t\t\t\tkhkey_t key = h->keys[j];\t\t\t\t\t\t\t\\", "\t\t\t\t\tkhval_t val;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tkhkey_t key = h->keys[j];\t\t\t\t\t\t\t\\", "\t\t\t\t\tkhval_t val;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tkhint_t new_mask;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tkhval_t val;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tkhint_t new_mask;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tnew_mask = new_n_buckets - 1; \t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tkhint_t new_mask;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tnew_mask = new_n_buckets - 1; \t\t\t\t\t\t\\", "\t\t\t\t\tif (kh_is_map) val = h->vals[j];\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tnew_mask = new_n_buckets - 1; \t\t\t\t\t\t\\", "\t\t\t\t\tif (kh_is_map) val = h->vals[j];\t\t\t\t\t\\", "\t\t\t\t\t__ac_set_isdel_true(h->flags, j);\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (kh_is_map) val = h->vals[j];\t\t\t\t\t\\", "\t\t\t\t\t__ac_set_isdel_true(h->flags, j);\t\t\t\t\t\\", "\t\t\t\t\twhile (1) { /* kick-out process; sort of like in Cuckoo hashing */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t__ac_set_isdel_true(h->flags, j);\t\t\t\t\t\\", "\t\t\t\t\twhile (1) { /* kick-out process; sort of like in Cuckoo hashing */ \\", "\t\t\t\t\t\tkhint_t k, i, step = 0; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\twhile (1) { /* kick-out process; sort of like in Cuckoo hashing */ \\", "\t\t\t\t\t\tkhint_t k, i, step = 0; \\", "\t\t\t\t\t\tk = __hash_func(key);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tkhint_t k, i, step = 0; \\", "\t\t\t\t\t\tk = __hash_func(key);\t\t\t\t\t\t\t\\", "\t\t\t\t\t\ti = k & new_mask;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tk = __hash_func(key);\t\t\t\t\t\t\t\\", "\t\t\t\t\t\ti = k & new_mask;\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\twhile (!__ac_isempty(new_flags, i)) i = (i + (++step)) & new_mask; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\ti = k & new_mask;\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\twhile (!__ac_isempty(new_flags, i)) i = (i + (++step)) & new_mask; \\", "\t\t\t\t\t\t__ac_set_isempty_false(new_flags, i);\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\twhile (!__ac_isempty(new_flags, i)) i = (i + (++step)) & new_mask; \\", "\t\t\t\t\t\t__ac_set_isempty_false(new_flags, i);\t\t\t\\", "\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t__ac_set_isempty_false(new_flags, i);\t\t\t\\", "\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\", "\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t__ac_set_isempty_false(new_flags, i);\t\t\t\\", "\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\", "\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\", "\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\", "\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\tif (i < h->n_buckets && __ac_iseither(h->flags, i) == 0) { /* kick out the existing element */ \\", "\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\", "\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\", "\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\t{ khkey_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } \\", "\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\", "\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\", "\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\", "\t\t\t\t\t\t} else { /* write the element and jump out of the loop */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\tif (kh_is_map) { khval_t tmp = h->vals[i]; h->vals[i] = val; val = tmp; } \\", "\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\", "\t\t\t\t\t\t} else { /* write the element and jump out of the loop */ \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\t__ac_set_isdel_true(h->flags, i); /* mark it as deleted in the old hash table */ \\", "\t\t\t\t\t\t} else { /* write the element and jump out of the loop */ \\", "\t\t\t\t\t\t\th->keys[i] = key;\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t} else { /* write the element and jump out of the loop */ \\", "\t\t\t\t\t\t\th->keys[i] = key;\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t\tif (kh_is_map) h->vals[i] = val;\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\th->keys[i] = key;\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t\tif (kh_is_map) h->vals[i] = val;\t\t\t\\", "\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\tif (kh_is_map) h->vals[i] = val;\t\t\t\\", "\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (h->n_buckets > new_n_buckets) { /* shrink the hash table */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (h->n_buckets > new_n_buckets) { /* shrink the hash table */ \\", "\t\t\t\th->keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (h->n_buckets > new_n_buckets) { /* shrink the hash table */ \\", "\t\t\t\th->keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\tif (kh_is_map) h->vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (h->n_buckets > new_n_buckets) { /* shrink the hash table */ \\", "\t\t\t\th->keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\tif (kh_is_map) h->vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\th->keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\tif (kh_is_map) h->vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\th->keys = (khkey_t*)krealloc((void *)h->keys, new_n_buckets * sizeof(khkey_t)); \\", "\t\t\t\tif (kh_is_map) h->vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (kh_is_map) h->vals = (khval_t*)krealloc((void *)h->vals, new_n_buckets * sizeof(khval_t)); \\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree(h->flags); /* free the working space */\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkfree(h->flags); /* free the working space */\t\t\t\t\\", "\t\t\th->flags = new_flags;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkfree(h->flags); /* free the working space */\t\t\t\t\\", "\t\t\th->flags = new_flags;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\th->n_buckets = new_n_buckets;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->flags = new_flags;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\th->n_buckets = new_n_buckets;\t\t\t\t\t\t\t\t\\", "\t\t\th->n_occupied = h->size;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->n_buckets = new_n_buckets;\t\t\t\t\t\t\t\t\\", "\t\t\th->n_occupied = h->size;\t\t\t\t\t\t\t\t\t\\", "\t\t\th->upper_bound = (khint_t)(h->n_buckets * __ac_HASH_UPPER + 0.5); \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->n_occupied = h->size;\t\t\t\t\t\t\t\t\t\\", "\t\t\th->upper_bound = (khint_t)(h->n_buckets * __ac_HASH_UPPER + 0.5); \\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->upper_bound = (khint_t)(h->n_buckets * __ac_HASH_UPPER + 0.5); \\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\", "\t\tREAL_FATTR_UNUSED;                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\", "\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkhint_t x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkhint_t x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkhint_t x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h->n_occupied >= h->upper_bound) { /* update the hash table */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tkhint_t x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (h->n_occupied >= h->upper_bound) { /* update the hash table */ \\", "\t\t\tif (h->n_buckets > (h->size<<1)) {\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h->n_occupied >= h->upper_bound) { /* update the hash table */ \\", "\t\t\tif (h->n_buckets > (h->size<<1)) {\t\t\t\t\t\t\t\\", "\t\t\t\tkh_resize_##name(h, h->n_buckets - 1); /* clear \"deleted\" elements */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (h->n_occupied >= h->upper_bound) { /* update the hash table */ \\", "\t\t\tif (h->n_buckets > (h->size<<1)) {\t\t\t\t\t\t\t\\", "\t\t\t\tkh_resize_##name(h, h->n_buckets - 1); /* clear \"deleted\" elements */ \\"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["\t\t\tif (h->n_buckets > (h->size<<1)) {\t\t\t\t\t\t\t\\", "\t\t\t\tkh_resize_##name(h, h->n_buckets - 1); /* clear \"deleted\" elements */ \\", "\t\t\t} else {                                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tkh_resize_##name(h, h->n_buckets - 1); /* clear \"deleted\" elements */ \\", "\t\t\t} else {                                                    \\", "\t\t\t\tkh_resize_##name(h, h->n_buckets + 1); /* expand the hash table */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t} else {                                                    \\", "\t\t\t\tkh_resize_##name(h, h->n_buckets + 1); /* expand the hash table */ \\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tkh_resize_##name(h, h->n_buckets + 1); /* expand the hash table */ \\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} /* TODO: to implement automatically shrinking; resize() already support shrinking */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} /* TODO: to implement automatically shrinking; resize() already support shrinking */ \\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} /* TODO: to implement automatically shrinking; resize() already support shrinking */ \\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t} /* TODO: to implement automatically shrinking; resize() already support shrinking */ \\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkhint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t} /* TODO: to implement automatically shrinking; resize() already support shrinking */ \\", "\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkhint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; \\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkhint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; \\", "\t\t\tx = site = h->n_buckets; k = __hash_func(key); i = k & mask; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkhint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; \\", "\t\t\tx = site = h->n_buckets; k = __hash_func(key); i = k & mask; \\", "\t\t\tif (__ac_isempty(h->flags, i)) x = i; /* for speed up */\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tkhint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; \\", "\t\t\tx = site = h->n_buckets; k = __hash_func(key); i = k & mask; \\", "\t\t\tif (__ac_isempty(h->flags, i)) x = i; /* for speed up */\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\tx = site = h->n_buckets; k = __hash_func(key); i = k & mask; \\", "\t\t\tif (__ac_isempty(h->flags, i)) x = i; /* for speed up */\t\\", "\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (__ac_isempty(h->flags, i)) x = i; /* for speed up */\t\\", "\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tlast = i; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\tif (__ac_isempty(h->flags, i)) x = i; /* for speed up */\t\\", "\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tlast = i; \\"], "readability/braces"]
["src/nvim/lib/khash.h", ["\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tlast = i; \\", "\t\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tlast = i; \\", "\t\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\t\tif (__ac_isdel(h->flags, i)) site = i;\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tlast = i; \\", "\t\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\t\tif (__ac_isdel(h->flags, i)) site = i;\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["\t\t\t\twhile (!__ac_isempty(h->flags, i) && (__ac_isdel(h->flags, i) || !__hash_equal(h->keys[i], key))) { \\", "\t\t\t\t\tif (__ac_isdel(h->flags, i)) site = i;\t\t\t\t\\", "\t\t\t\t\ti = (i + (++step)) & mask; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (__ac_isdel(h->flags, i)) site = i;\t\t\t\t\\", "\t\t\t\t\ti = (i + (++step)) & mask; \\", "\t\t\t\t\tif (i == last) { x = site; break; }\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\ti = (i + (++step)) & mask; \\", "\t\t\t\t\tif (i == last) { x = site; break; }\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\ti = (i + (++step)) & mask; \\", "\t\t\t\t\tif (i == last) { x = site; break; }\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (i == last) { x = site; break; }\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tif (x == h->n_buckets) {\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tif (x == h->n_buckets) {\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__ac_isempty(h->flags, i) && site != h->n_buckets) x = site; \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\tif (x == h->n_buckets) {\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__ac_isempty(h->flags, i) && site != h->n_buckets) x = site; \\", "\t\t\t\t\telse x = i;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (__ac_isempty(h->flags, i) && site != h->n_buckets) x = site; \\", "\t\t\t\t\telse x = i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t\tif (__ac_isempty(h->flags, i) && site != h->n_buckets) x = site; \\", "\t\t\t\t\telse x = i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\t\t\telse x = i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (__ac_isempty(h->flags, x)) { /* not present at all */\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (__ac_isempty(h->flags, x)) { /* not present at all */\t\t\\", "\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (__ac_isempty(h->flags, x)) { /* not present at all */\t\t\\", "\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t++h->size; ++h->n_occupied;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t++h->size; ++h->n_occupied;\t\t\t\t\t\t\t\t\t\\", "\t\t\t*ret = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t++h->size; ++h->n_occupied;\t\t\t\t\t\t\t\t\t\\", "\t\t\t*ret = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t\t++h->size; ++h->n_occupied;\t\t\t\t\t\t\t\t\t\\", "\t\t\t*ret = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else if (__ac_isdel(h->flags, x)) { /* deleted */\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t*ret = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else if (__ac_isdel(h->flags, x)) { /* deleted */\t\t\t\t\\", "\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t} else if (__ac_isdel(h->flags, x)) { /* deleted */\t\t\t\t\\", "\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\th->keys[x] = key;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t++h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t__ac_set_isboth_false(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t++h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t*ret = 2;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t++h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t*ret = 2;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else *ret = 0; /* Don't touch h->keys[x] if present and not deleted */ \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t*ret = 2;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else *ret = 0; /* Don't touch h->keys[x] if present and not deleted */ \\", "\t\treturn x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t*ret = 2;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else *ret = 0; /* Don't touch h->keys[x] if present and not deleted */ \\", "\t\treturn x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/khash.h", ["\t\t\t*ret = 2;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else *ret = 0; /* Don't touch h->keys[x] if present and not deleted */ \\", "\t\treturn x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/khash.h", ["\t\t} else *ret = 0; /* Don't touch h->keys[x] if present and not deleted */ \\", "\t\treturn x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\treturn x;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                    \\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\", "\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tREAL_FATTR_UNUSED;                                    \\", "\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x != h->n_buckets && !__ac_iseither(h->flags, x)) {\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tSCOPE void kh_del_##name(kh_##name##_t *h, khint_t x)\t\t\t\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x != h->n_buckets && !__ac_iseither(h->flags, x)) {\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/khash.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x != h->n_buckets && !__ac_iseither(h->flags, x)) {\t\t\t\\", "\t\t\t__ac_set_isdel_true(h->flags, x);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (x != h->n_buckets && !__ac_iseither(h->flags, x)) {\t\t\t\\", "\t\t\t__ac_set_isdel_true(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t--h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t__ac_set_isdel_true(h->flags, x);\t\t\t\t\t\t\t\\", "\t\t\t--h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t\t--h->size;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["", "#define KHASH_DECLARE(name, khkey_t, khval_t)\t\t \t\t\t\t\t\\", "\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_DECLARE(name, khkey_t, khval_t)\t\t \t\t\t\t\t\\", "\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\", "\t__KHASH_PROTOTYPES(name, khkey_t, khval_t)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\", "\t__KHASH_PROTOTYPES(name, khkey_t, khval_t)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["", "#define KHASH_INIT2(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define KHASH_INIT2(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\", "\t__KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\", "\t__KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t__KHASH_TYPE(name, khkey_t, khval_t) \t\t\t\t\t\t\t\t\\", "\t__KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)", ""], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["", "#define KHASH_INIT(name, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\tKHASH_INIT2(name, static kh_inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)"], "whitespace/line_length"]
["src/nvim/lib/khash.h", ["#define KHASH_INIT(name, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\tKHASH_INIT2(name, static kh_inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_INIT(name, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal) \\", "\tKHASH_INIT2(name, static kh_inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)", ""], "whitespace/line_length"]
["src/nvim/lib/khash.h", [" */", "#define kh_int64_hash_func(key) (khint32_t)((key)>>33^(key)^(key)<<11)", "/*! @function"], "whitespace/operators"]
["src/nvim/lib/khash.h", ["{", "\tkhint_t h = (khint_t)*s;", "\tif (h) for (++s ; *s; ++s) h = (h << 5) - h + (uint8_t)*s;"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tkhint_t h = (khint_t)*s;", "\tif (h) for (++s ; *s; ++s) h = (h << 5) - h + (uint8_t)*s;", "\treturn h;"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tif (h) for (++s ; *s; ++s) h = (h << 5) - h + (uint8_t)*s;", "\treturn h;", "}"], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define kh_foreach(h, kvar, vvar, code) { khint_t __i;\t\t\\", "\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define kh_foreach(h, kvar, vvar, code) { khint_t __i;\t\t\\", "\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\t(kvar) = kh_key(h,__i);\t\t\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t} }"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t} }", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define kh_foreach_value(h, vvar, code) { khint_t __i;\t\t\\", "\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define kh_foreach_value(h, vvar, code) { khint_t __i;\t\t\\", "\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\tfor (__i = kh_begin(h); __i != kh_end(h); ++__i) {\t\t\\", "\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tif (!kh_exist(h,__i)) continue;\t\t\t\t\t\t\\", "\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/comma"]
["src/nvim/lib/khash.h", ["\t\t(vvar) = kh_val(h,__i);\t\t\t\t\t\t\t\t\\", "\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t} }"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["\t\tcode;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t} }", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_SET_INIT_INT(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint32_t, char, 0, kh_int_hash_func, kh_int_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_SET_INIT_INT(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint32_t, char, 0, kh_int_hash_func, kh_int_hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_MAP_INIT_INT(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint32_t, khval_t, 1, kh_int_hash_func, kh_int_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_MAP_INIT_INT(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint32_t, khval_t, 1, kh_int_hash_func, kh_int_hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_SET_INIT_INT64(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint64_t, char, 0, kh_int64_hash_func, kh_int64_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_SET_INIT_INT64(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint64_t, char, 0, kh_int64_hash_func, kh_int64_hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_MAP_INIT_INT64(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_MAP_INIT_INT64(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_MAP_INIT_INT64(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, khint64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)", ""], "whitespace/line_length"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_SET_INIT_STR(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, kh_cstr_t, char, 0, kh_str_hash_func, kh_str_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_SET_INIT_STR(name)\t\t\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, kh_cstr_t, char, 0, kh_str_hash_func, kh_str_hash_equal)", ""], "whitespace/tab"]
["src/nvim/lib/khash.h", [" */", "#define KHASH_MAP_INIT_STR(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, kh_cstr_t, khval_t, 1, kh_str_hash_func, kh_str_hash_equal)"], "whitespace/tab"]
["src/nvim/lib/khash.h", ["#define KHASH_MAP_INIT_STR(name, khval_t)\t\t\t\t\t\t\t\t\\", "\tKHASH_INIT(name, kh_cstr_t, khval_t, 1, kh_str_hash_func, kh_str_hash_equal)", "#endif /* __AC_KHASH_H */"], "whitespace/tab"]
["src/nvim/lib/klist.h", ["", "#ifndef _AC_KLIST_H", "#define _AC_KLIST_H"], "build/header_guard"]
["src/nvim/lib/klist.h", ["", "#endif", ""], "build/header_guard"]
["src/nvim/lib/klist.h", ["        for (k = 0; k < mp->n; ++k) {                                   \\", "            kmpfree_f(mp->buf[k]); xfree(mp->buf[k]);                   \\", "        }                                                               \\"], "whitespace/newline"]
["src/nvim/lib/klist.h", ["        }                                                               \\", "        xfree(mp->buf); xfree(mp);                                      \\", "    }                                                                   \\"], "whitespace/newline"]
["src/nvim/lib/klist.h", ["        if (mp->n == mp->max) {                                         \\", "            mp->max = mp->max? mp->max<<1 : 16;                         \\", "            mp->buf = xrealloc(mp->buf, sizeof(kmptype_t *) * mp->max); \\"], "whitespace/operators"]
["src/nvim/lib/klist.h", ["        kl1_##name *q, *p = kmp_alloc(name, kl->mp);                    \\", "        q = kl->tail; p->next = 0; kl->tail->next = p; kl->tail = p;    \\", "        ++kl->size;                                                     \\"], "whitespace/newline"]
["src/nvim/lib/klist.h", ["    }                                                                   \\", "    ", ""], "whitespace/end_of_line"]
["src/nvim/lib/kvec.h", ["", "#ifndef AC_KVEC_H", "#define AC_KVEC_H"], "build/header_guard"]
["src/nvim/lib/kvec.h", ["", "#endif", ""], "build/header_guard"]
["src/nvim/lib/kvec.h", ["", "#define kv_roundup32(x) (--(x), (x)|=(x)>>1, (x)|=(x)>>2, (x)|=(x)>>4, (x)|=(x)>>8, (x)|=(x)>>16, ++(x))", ""], "whitespace/line_length"]
["src/nvim/lib/kvec.h", ["", "#define kvec_t(type) struct { size_t size, capacity; type *items; }", "#define kv_init(v) ((v).size = (v).capacity = 0, (v).items = 0)"], "whitespace/newline"]
["src/nvim/lib/kvec.h", ["", "#define kv_resize(type, v, s)  ((v).capacity = (s), (v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity))", ""], "whitespace/line_length"]
["src/nvim/lib/kvec.h", ["", "#define kv_copy(type, v1, v0) do {\t\t\t\t\t\t\t\\", "\t\tif ((v1).capacity < (v0).size) kv_resize(type, v1, (v0).size);\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["#define kv_copy(type, v1, v0) do {\t\t\t\t\t\t\t\\", "\t\tif ((v1).capacity < (v0).size) kv_resize(type, v1, (v0).size);\t\\", "\t\t(v1).size = (v0).size;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\tif ((v1).capacity < (v0).size) kv_resize(type, v1, (v0).size);\t\\", "\t\t(v1).size = (v0).size;\t\t\t\t\t\t\t\t\t\\", "\t\tmemcpy((v1).items, (v0).items, sizeof(type) * (v0).size);\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t(v1).size = (v0).size;\t\t\t\t\t\t\t\t\t\\", "\t\tmemcpy((v1).items, (v0).items, sizeof(type) * (v0).size);\t\t\\", "\t} while (0)\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\tmemcpy((v1).items, (v0).items, sizeof(type) * (v0).size);\t\t\\", "\t} while (0)\t\t\t\t\t\t\t\t\t\t\t\t\\", ""], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["", "#define kv_push(type, v, x) do {\t\t\t\t\t\t\t\t\t\\", "\t\tif ((v).size == (v).capacity) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["#define kv_push(type, v, x) do {\t\t\t\t\t\t\t\t\t\\", "\t\tif ((v).size == (v).capacity) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t(v).capacity = (v).capacity? (v).capacity<<1 : 8;\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\tif ((v).size == (v).capacity) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t(v).capacity = (v).capacity? (v).capacity<<1 : 8;\t\t\t\t\t\t\t\\", "\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity);\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\tif ((v).size == (v).capacity) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t(v).capacity = (v).capacity? (v).capacity<<1 : 8;\t\t\t\t\t\t\t\\", "\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity);\t\\"], "whitespace/operators"]
["src/nvim/lib/kvec.h", ["\t\t\t(v).capacity = (v).capacity? (v).capacity<<1 : 8;\t\t\t\t\t\t\t\\", "\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity);\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity);\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t(v).items[(v).size++] = (x);\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t(v).items[(v).size++] = (x);\t\t\t\t\t\t\t\t\t\t\\", "\t} while (0)"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t(v).items[(v).size++] = (x);\t\t\t\t\t\t\t\t\t\t\\", "\t} while (0)", ""], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["", "#define kv_pushp(type, v) (((v).size == (v).capacity)?\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t   ((v).capacity = ((v).capacity? (v).capacity<<1 : 8),\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["#define kv_pushp(type, v) (((v).size == (v).capacity)?\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t   ((v).capacity = ((v).capacity? (v).capacity<<1 : 8),\t\t\t\t\\", "\t\t\t\t\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0)\t\\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["#define kv_pushp(type, v) (((v).size == (v).capacity)?\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t   ((v).capacity = ((v).capacity? (v).capacity<<1 : 8),\t\t\t\t\\", "\t\t\t\t\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0)\t\\"], "whitespace/operators"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t   ((v).capacity = ((v).capacity? (v).capacity<<1 : 8),\t\t\t\t\\", "\t\t\t\t\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0)\t\\", "\t\t\t\t\t\t   : 0), ((v).items + ((v).size++))"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t\t(v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0)\t\\", "\t\t\t\t\t\t   : 0), ((v).items + ((v).size++))", ""], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["#define kv_a(type, v, i) (((v).capacity <= (size_t)(i)? \\", "\t\t\t\t\t\t  ((v).capacity = (v).size = (i) + 1, kv_roundup32((v).capacity), \\", "\t\t\t\t\t\t   (v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0) \\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t  ((v).capacity = (v).size = (i) + 1, kv_roundup32((v).capacity), \\", "\t\t\t\t\t\t   (v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0) \\", "\t\t\t\t\t\t  : (v).size <= (size_t)(i)? (v).size = (i) + 1 \\"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t  ((v).capacity = (v).size = (i) + 1, kv_roundup32((v).capacity), \\", "\t\t\t\t\t\t   (v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0) \\", "\t\t\t\t\t\t  : (v).size <= (size_t)(i)? (v).size = (i) + 1 \\"], "whitespace/line_length"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t   (v).items = (type*)xrealloc((v).items, sizeof(type) * (v).capacity), 0) \\", "\t\t\t\t\t\t  : (v).size <= (size_t)(i)? (v).size = (i) + 1 \\", "\t\t\t\t\t\t  : 0), (v).items[(i)])"], "whitespace/tab"]
["src/nvim/lib/kvec.h", ["\t\t\t\t\t\t  : (v).size <= (size_t)(i)? (v).size = (i) + 1 \\", "\t\t\t\t\t\t  : 0), (v).items[(i)])", ""], "whitespace/tab"]
["src/nvim/lib/queue.h", ["", "#ifndef QUEUE_H_", "#define QUEUE_H_"], "build/header_guard"]
["src/nvim/lib/queue.h", ["", "#endif /* QUEUE_H_ */", ""], "build/header_guard"]
